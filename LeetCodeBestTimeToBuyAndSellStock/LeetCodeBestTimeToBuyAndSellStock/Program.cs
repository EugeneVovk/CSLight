using System;
/**
 * Дан массив цен, где prices[i] - это цена данной акции на i-й день.
 * Вы хотите максимизировать свою прибыль, выбрав один день для покупки одной акции 
 * и выбрав другой день в будущем для продажи этой акции.
 * Вернуть максимальную прибыль, которую можно получить от этой транзакции. 
 * Если вы не можете получить никакой прибыли, верните 0.
 * 
 * т.е. нам нужно купить по дешевле продать по дороже,
 * но нельзя продать раньше, чем ты купил
 * Решение: проходим по всем ценам, на каждом шаге будем перезаписывать минимум,
 * но перед этим мы будем каждый раз считать, а не самый ли выгодный сегодня день?
 * т.е. проходим по списку, за один проход на каждой итерации смотрим - 
 * сейчас самая дешёвая цена? тогда пусть она будет самой дешёвой.
 * а раздница, которая сейчас есть, это самая максимальная? (между самой дешёвой и текущей)
 * => каждый раз мы идём по самой оптимальной стратегии и записываем самую "жирную" прибыль
 */

namespace LeetCodeBestTimeToBuyAndSellStock
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[] prices = { 7, 1, 5, 3, 6, 4 };

            Console.WriteLine(MaxProfit(prices));
        }

        public static int MaxProfit(int[] prices)
        {
            int price;
            int maxProfit = 0;
            int currentMin = prices[0];

            for (int i = 1; i < prices.Length; i++)
            {
                price = prices[i];
                maxProfit = Math.Max(maxProfit, price - currentMin);
                currentMin = Math.Min(currentMin, price);
            }

            return maxProfit;
        }
    }
}
